// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// NextAuth.js Schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id        String     @id @default(cuid())
  name      String?
  address   String     @unique // Ethereum address for SIWE authentication
  nonce     String? // SIWE nonce for authentication challenges
  image     String?
  accounts  Account[]
  sessions  Session[]
  positions Position[]
  apiKeys   ApiKey[] // User's API keys

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// API Key Model - for API authentication
model ApiKey {
  id         String    @id @default(cuid())
  userId     String // User who owns this key
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String // "CI on repo X", "Zapier", etc.
  prefix     String // first ~6-8 chars for quick lookup
  hash       String // argon2/bcrypt hash of full key
  scopes     String[] // e.g. ["read:positions","write:orders"]
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  revokedAt  DateTime?

  // Future: usage counters
  monthlyUsage Int @default(0)
  dailyUsage   Int @default(0)

  @@index([userId])
  @@index([prefix])
  @@map("api_keys")
}

// Global Token Model - All tokens in one table with composite primary key
model Token {
  // Composite Primary Key: chain + address (no auto-generated ID)
  chain   String // "ethereum", "arbitrum", "base"
  address String

  // Core token metadata
  symbol   String
  name     String
  decimals Int
  logoUrl  String?

  // Market data for internal ranking (not exposed to users)
  marketCap      String? // BigInt as string for internal ranking
  coinGeckoId    String? // Link to CoinGecko record
  lastEnrichedAt DateTime? // Cache management for market data

  // Source and verification
  source   String // "alchemy", "contract"
  verified Boolean @default(false)

  // Relations (direct token references)
  poolsAsToken0 Pool[] @relation("PoolToken0")
  poolsAsToken1 Pool[] @relation("PoolToken1")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Primary key and indexes
  @@id([chain, address]) // Composite primary key
  @@index([chain, symbol])
  @@index([verified, source]) // Global verified tokens
  @@index([chain, marketCap(sort: Desc)]) // Market cap ranking for search
  @@map("tokens")
}

// Pool Model - central Pool data with flexible Token references
model Pool {
  // Chain & Address (composite primary key)
  chain       String // "ethereum", "arbitrum", "base"
  poolAddress String
  protocol    String @default("uniswapv3") // "uniswapv3", future: "uniswapv2", "sushiswap", etc.

  // Direct token references using pool's chain + token addresses
  token0Address String
  token0        Token  @relation("PoolToken0", fields: [chain, token0Address], references: [chain, address])

  token1Address String
  token1        Token  @relation("PoolToken1", fields: [chain, token1Address], references: [chain, address])

  // Pool Parameters
  fee         Int // Fee in basis points (100 = 0.01%, 500 = 0.05%, 3000 = 0.3%, 10000 = 1%)
  tickSpacing Int

  // Current State (updated periodically)
  currentTick          Int?
  currentPrice         String? // BigInt as string (token1 per token0 in smallest unit)
  sqrtPriceX96         String? // Uniswap V3 price format
  feeGrowthGlobal0X128 String  @default("0") // Q128.128 fee growth of token0
  feeGrowthGlobal1X128 String  @default("0") // Q128.128 fee growth of token1

  // Relations
  positions Position[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([chain, poolAddress]) // Composite primary key
  @@unique([chain, protocol, token0Address, token1Address, fee])
  @@index([chain, protocol, token0Address, token1Address])
  @@index([protocol])
  @@map("pools")
}

// Simplified Position Model
model Position {
  // Composite Primary Key: chain + protocol + nftId
  chain    String // "ethereum", "arbitrum", "base"
  protocol String @default("uniswapv3") // "uniswapv3", future: "uniswapv2", etc.
  nftId    String // For NFT imports

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Pool reference using composite key
  poolAddress String
  pool        Pool   @relation(fields: [chain, poolAddress], references: [chain, poolAddress])

  // Position Details
  tickLower Int
  tickUpper Int
  liquidity String // BigInt as String

  // Token Configuration (f√ºr PnL-Berechnung)
  token0IsQuote Boolean // true wenn Token0 = Quote Asset, false wenn Token1 = Quote Asset

  // Owner Information
  owner String? // Wallet address of position owner

  // Import Metadata
  importType String // "manual", "wallet", "nft"

  // Position State
  status String @default("active") // "active", "closed", "archived"

  // Relations
  events     PositionEvent[]
  pnlCache   PositionPnL? // Optional cached PnL data
  curveCache PositionCurve? // Optional cached curve data

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, chain, protocol, nftId]) // Composite primary key including userId
  @@index([userId, status])
  @@index([owner])
  @@index([chain, poolAddress])
  @@map("positions")
}

// Position Event Model - Stateful event ledger with proper ordering and caching
model PositionEvent {
  id String @id @default(cuid())

  // Relations
  positionUserId   String
  positionChain    String
  positionProtocol String
  positionNftId    String
  position         Position @relation(fields: [positionUserId, positionChain, positionProtocol, positionNftId], references: [userId, chain, protocol, nftId], onDelete: Cascade)

  // Ledger Order
  ledgerIgnore Boolean // Ignore this event in the ledger

  // Blockchain Ordering (CRITICAL for proper event sequencing)
  blockNumber      BigInt // Ethereum block number
  transactionIndex Int // Transaction index within block
  logIndex         Int // Log index within transaction
  blockTimestamp   DateTime // Block timestamp (not event processing time)
  transactionHash  String // For deduplication and verification

  // Event Classification
  eventType String // "INCREASE", "DECREASE", "COLLECT"

  // Liquidity Changes
  deltaL         String // BigInt: +/- liquidity change (can be negative for DECREASE)
  liquidityAfter String // BigInt: Total position liquidity after this event

  // Price Information
  poolPrice String // BigInt: Quote tokens per 1 Base token (in smallest units)

  // Token Amounts (in smallest units)
  token0Amount      String @default("0") // BigInt: Token0 amount added/removed
  token1Amount      String @default("0") // BigInt: Token1 amount added/removed
  tokenValueInQuote String @default("0") // BigInt: Position value in quote token (INCREASE/DECREASE only) after event

  // Fees
  feesCollected0  String @default("0") // BigInt: Collected token0 fees from this event
  feesCollected1  String @default("0") // BigInt: Collected token1 fees from this event
  feeValueInQuote String @default("0") // BigInt: Fee value in quote token (COLLECT events only)

  // Uncollected Principal Tracking
  uncollectedPrincipal0 String @default("0") // BigInt: Token0 principal waiting to be collected (DECREASE events add, COLLECT events subtract)
  uncollectedPrincipal1 String @default("0") // BigInt: Token1 principal waiting to be collected (DECREASE events add, COLLECT events subtract)

  // Cost Basis
  deltaCostBasis String // BigInt: Cost Basis Change
  costBasisAfter String // BigInt: Total cost basis after this event

  // PnL
  deltaPnL         String // BigInt: Change in Realized PnL   
  realizedPnLAfter String // BigInt: Realized PnL from position changes only (INCREASE/DECREASE)

  // Metadata and syncing
  source      String // "onchain" | "manual"
  createdAt   DateTime
  inputHash   String // manual: MD5("manual-rnd()), onchain: MD5(CONCAT(blocknumber, txIndex, logIndex))")
  calcVersion Int // Increasing number per calculation run, should be the same within each position

  // APR Calculation
  aprData PositionEventApr? // 1:1 relationship

  @@unique([transactionHash, logIndex, positionUserId, positionChain, positionProtocol, positionNftId]) // Prevent exact duplicates
  @@unique([inputHash]) // Prvent duplicates during sync
  // Indexes for performance and ordering
  @@index([positionUserId, positionChain, positionProtocol, positionNftId, blockNumber, transactionIndex, logIndex]) // Natural blockchain ordering
  @@map("position_events")
}

// Position Event APR Model - APR calculation data for each position event (1:1 relationship)
model PositionEventApr {
  id String @id @default(cuid())

  // 1:1 Relationship with PositionEvent
  eventId String        @unique
  event   PositionEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Period Definition
  periodStartDate DateTime // This event's timestamp
  periodEndDate   DateTime? // Next event's timestamp (null for latest event)
  periodDays      Float? // Period duration in days (null for latest)

  // Financial Data for this Period (BigInt as String)
  periodCostBasis String // Cost basis during this period (from costBasisAfter)
  allocatedFees   String @default("0") // Fees allocated to this period
  periodApr       Float? // APR contribution from this period

  // Calculation Metadata
  calculatedAt DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isValid      Boolean  @default(true)

  @@index([eventId, isValid])
  @@map("position_event_apr")
}

// Pool Price Cache Model - Database-backed price caching for PoolPriceService
model PoolPriceCache {
  id String @id @default(cuid())

  // Cache Key Components
  chain       String // "ethereum", "arbitrum", "base"
  poolAddress String // Lowercase pool address
  blockNumber BigInt // Block number for historical data

  // Price Data (BigInt as String for precision)
  sqrtPriceX96 String // Uniswap V3 price format
  tick         Int // Current tick

  // Block Information
  blockTimestamp DateTime // Block timestamp

  // Metadata
  source      String   @default("alchemy-rpc") // Always "alchemy-rpc"
  confidence  String   @default("exact") // Always "exact"
  retrievedAt DateTime @default(now()) // When cached

  // TTL Management
  expiresAt DateTime? // For future TTL implementation

  // Performance Indexes
  @@unique([chain, poolAddress, blockNumber]) // Natural cache key
  @@index([chain, poolAddress]) // Pool-specific queries
  @@index([expiresAt]) // TTL cleanup queries
  @@map("pool_price_cache")
}

// Position PnL Cache Model - Cached PnL calculations for performance optimization
model PositionPnL {
  id String @id @default(cuid())

  // Relations
  positionUserId   String
  positionChain    String
  positionProtocol String
  positionNftId    String
  position         Position @relation(fields: [positionUserId, positionChain, positionProtocol, positionNftId], references: [userId, chain, protocol, nftId], onDelete: Cascade)

  // Core PnL Metrics (all in quote token units as strings for BigInt precision)
  currentValue     String // Current position value
  currentCostBasis String // Latest cost basis from PositionEvent
  collectedFees    String // Total fees collected historically
  unclaimedFees    String // Current unclaimed fees value
  realizedPnL      String // Current realized PnL from PositionEvent

  // Derived Metrics
  unrealizedPnL String // currentValue - currentCostBasis
  totalPnL      String // unrealizedPnL + collectedFees

  // Cache Metadata
  calculatedAt DateTime @default(now()) // When this PnL was calculated
  updatedAt    DateTime @updatedAt // Auto-updated on changes
  isValid      Boolean  @default(true) // Cache validity flag

  // Pool state at calculation time (for cache invalidation logic)
  poolTick         Int? // Pool tick when calculated
  poolSqrtPriceX96 String? // Pool price when calculated

  // Performance Indexes
  @@unique([positionUserId, positionChain, positionProtocol, positionNftId]) // One-to-one with Position
  @@index([positionUserId, positionChain, positionProtocol, positionNftId, isValid]) // Quick cache lookups
  @@index([calculatedAt]) // Cleanup old cache entries
  @@map("position_pnl_cache")
}

// Position Curve Cache Model - Cached PnL curve visualization data
model PositionCurve {
  id String @id @default(cuid())

  // Relations
  positionUserId   String
  positionChain    String
  positionProtocol String
  positionNftId    String
  position         Position @relation(fields: [positionUserId, positionChain, positionProtocol, positionNftId], references: [userId, chain, protocol, nftId], onDelete: Cascade)

  // Curve Data (JSON for atomic operations)
  curveData Json // Complete CurveData object as JSON

  // Cache Metadata
  calculatedAt DateTime @default(now()) // When this curve was calculated
  updatedAt    DateTime @updatedAt // Auto-updated on changes
  isValid      Boolean  @default(true) // Cache validity flag

  // Invalidation triggers (for cache dependency tracking)
  poolTick         Int? // Pool tick when calculated
  poolSqrtPriceX96 String? // Pool price when calculated
  pnlCacheVersion  String? // Link to PositionPnL cache version for invalidation

  // Performance Indexes
  @@unique([positionUserId, positionChain, positionProtocol, positionNftId]) // One-to-one with Position
  @@index([positionUserId, positionChain, positionProtocol, positionNftId, isValid]) // Quick cache lookups
  @@index([calculatedAt]) // Cleanup old cache entries
  @@map("position_curve_cache")
}

// Blockscanner Models for Reorg Detection and Event Scanning

// Block Header Model - Sliding window of recent block headers for reorg detection
model BlockScannerHeader {
  id String @id @default(cuid())

  // Chain and Block Identification
  chain       String // "ethereum", "arbitrum", "base"
  blockNumber BigInt // Block number
  hash        String // Block hash (0x...)
  parentHash  String // Parent block hash for reorg detection
  timestamp   DateTime // Block timestamp

  // Metadata
  createdAt DateTime @default(now())

  // Composite unique constraint and indexes
  @@unique([chain, blockNumber]) // One header per chain per block number
  @@index([chain, blockNumber]) // Fast lookups by chain and block
  @@index([chain, hash]) // Fast hash lookups for reorg detection
  @@map("blockscanner_headers")
}

// Scanner Watermark Model - Track highest processed block per chain
model BlockScannerWatermark {
  id String @id @default(cuid())

  // Chain Identification
  chain String @unique // "ethereum", "arbitrum", "base" (one watermark per chain)

  // Watermark State
  lastProcessedHeight BigInt // Highest fully processed block number

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blockscanner_watermarks")
}
