// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String    // Hashed password
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  positions     Position[]
  userTokens    UserToken[]  // User's custom token list
  ownedPools    Pool[]    @relation("PoolOwner")  // Pools with custom tokens
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Token Model - NUR verifizierte Tokens von Alchemy (global)
model Token {
  id            String   @id @default(cuid())
  
  // Chain & Address (unique zusammen)
  chain         String   // "ethereum", "arbitrum", "base"
  address       String
  
  // Token Information
  symbol        String
  name          String
  decimals      Int
  
  // Alchemy Metadata
  logoUrl       String?
  verified      Boolean  @default(true)   // Immer true für globale Tokens
  
  // Metadata Caching
  lastUpdatedAt DateTime?  // Wann zuletzt von Alchemy aktualisiert
  
  // Relations
  poolsAsToken0 Pool[]   @relation("Token0")
  poolsAsToken1 Pool[]   @relation("Token1")
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([chain, address])
  @@index([chain, symbol])
  @@map("tokens")
}

// UserToken Model - User-spezifische Custom Tokens
model UserToken {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Chain & Address
  chain         String   // "ethereum", "arbitrum", "base"
  address       String
  
  // Token Information
  symbol        String
  name          String
  decimals      Int
  logoUrl       String?
  
  // Metadata
  source        String   // "contract", "manual", "placeholder"
  addedAt       DateTime @default(now())
  lastUsedAt    DateTime @updatedAt
  
  // User kann eigene Labels vergeben
  userLabel     String?  // z.B. "My Test Token"
  notes         String?  // User Notizen
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, chain, address])
  @@index([userId, chain])
  @@index([userId, symbol])
  @@map("user_tokens")
}

// Pool Model - zentrale Pool-Daten mit flexiblen Token References
model Pool {
  id            String   @id @default(cuid())
  
  // Chain & Address (unique zusammen)
  chain         String   // "ethereum", "arbitrum", "base"
  poolAddress   String
  
  // Flexible Token Relations (kann null sein wenn custom token)
  token0Id      String?
  token0        Token?   @relation("Token0", fields: [token0Id], references: [id])
  token1Id      String?
  token1        Token?   @relation("Token1", fields: [token1Id], references: [id])
  
  // Token Addresses (immer gesetzt für custom tokens)
  token0Address String
  token1Address String
  
  // Pool Parameters
  fee           Int      // Fee in basis points (100 = 0.01%, 500 = 0.05%, 3000 = 0.3%, 10000 = 1%)
  tickSpacing   Int
  
  // Current State (updated periodically)
  currentTick   Int?
  currentPrice  String?  // As decimal string
  sqrtPriceX96  String?  // Uniswap V3 price format
  tvl           String?
  volume24h     String?
  apr           Float?
  
  // Pool Owner (für custom tokens)
  ownerId       String?
  owner         User?    @relation("PoolOwner", fields: [ownerId], references: [id])
  
  // Relations
  positions     Position[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([chain, poolAddress])
  @@unique([chain, token0Address, token1Address, fee])
  @@index([chain, token0Id, token1Id])
  @@index([chain, token0Address, token1Address])
  @@index([ownerId])
  @@map("pools")
}

// Simplified Position Model
model Position {
  id            String   @id @default(cuid())
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  poolId        String
  pool          Pool     @relation(fields: [poolId], references: [id])
  
  // Position Details
  tickLower     Int
  tickUpper     Int
  liquidity     String   // BigInt as String
  
  // Import Metadata
  importType    String   // "manual", "wallet", "nft"
  nftId         String?  // For NFT imports
  walletAddress String?  // For wallet imports
  
  // Position State
  status        String   @default("active") // "active", "closed", "archived"
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId, status])
  @@map("positions")
}
