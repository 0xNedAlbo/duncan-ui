// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  password      String // Hashed password
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  positions     Position[]
  userTokens    UserToken[] // User's custom token list
  ownedPools    Pool[]      @relation("PoolOwner") // Pools with custom tokens

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Token Model - ONLY verified tokens from Alchemy (global)
model Token {
  id String @id @default(cuid())

  // Chain & Address (unique together)
  chain   String // "ethereum", "arbitrum", "base"
  address String

  // Token Information
  symbol   String
  name     String
  decimals Int

  // Alchemy Metadata
  logoUrl  String?
  verified Boolean @default(true) // Always true for global tokens

  // Metadata Caching
  lastUpdatedAt DateTime? // When last updated from Alchemy

  // Relations
  // poolsAsToken0 Pool[]   @relation("Token0")
  // poolsAsToken1 Pool[]   @relation("Token1")
  references TokenReference[] @relation("TokenReferenceToGlobal")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chain, address])
  @@index([chain, symbol])
  @@map("tokens")
}

// UserToken Model - User-specific Custom Tokens
model UserToken {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Chain & Address
  chain   String // "ethereum", "arbitrum", "base"
  address String

  // Token Information
  symbol   String
  name     String
  decimals Int
  logoUrl  String?

  // Metadata
  source     String // "contract", "manual", "placeholder"
  addedAt    DateTime @default(now())
  lastUsedAt DateTime @updatedAt

  // User can assign custom labels
  userLabel String? // e.g. "My Test Token"
  notes     String? // User notes

  // Relations
  references TokenReference[] @relation("TokenReferenceToUser")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chain, address])
  @@index([userId, chain])
  @@index([userId, symbol])
  @@map("user_tokens")
}

// TokenReference Model - Polymorphic token reference for unified Pool relations
model TokenReference {
  id String @id @default(cuid())

  // Polymorphic token type discriminator
  tokenType String // "global" | "user"

  // XOR relationship - exactly one must be set
  globalTokenId String?
  globalToken   Token?  @relation("TokenReferenceToGlobal", fields: [globalTokenId], references: [id], onDelete: Cascade)

  userTokenId String?
  userToken   UserToken? @relation("TokenReferenceToUser", fields: [userTokenId], references: [id], onDelete: Cascade)

  // Denormalized fields for query performance
  chain   String
  address String
  symbol  String // Cached for quick access

  // Pool relations
  poolsAsToken0 Pool[] @relation("PoolToken0Reference")
  poolsAsToken1 Pool[] @relation("PoolToken1Reference")

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Constraints
  @@unique([tokenType, globalTokenId]) // Each global token has max one reference
  @@unique([tokenType, userTokenId]) // Each user token has max one reference
  @@unique([chain, address, tokenType, globalTokenId]) // Prevent duplicate global references
  @@unique([chain, address, tokenType, userTokenId]) // Prevent duplicate user references
  @@index([chain, address])
  @@index([tokenType])
  @@index([symbol])
  @@map("token_references")
}

// Pool Model - central Pool data with flexible Token references
model Pool {
  id String @id @default(cuid())

  // Chain & Address (unique together)
  chain       String // "ethereum", "arbitrum", "base"
  poolAddress String

  // TokenReference Relations (polymorphic token handling)
  token0RefId String
  token0Ref   TokenReference @relation("PoolToken0Reference", fields: [token0RefId], references: [id])
  token1RefId String
  token1Ref   TokenReference @relation("PoolToken1Reference", fields: [token1RefId], references: [id])

  // Token Addresses (kept for backward compatibility and direct queries)
  token0Address String
  token1Address String

  // Legacy token relations (deprecated, will be removed after migration)
  // token0Id      String?
  // token0        Token?   @relation("Token0", fields: [token0Id], references: [id])
  // token1Id      String?
  // token1        Token?   @relation("Token1", fields: [token1Id], references: [id])

  // Pool Parameters
  fee         Int // Fee in basis points (100 = 0.01%, 500 = 0.05%, 3000 = 0.3%, 10000 = 1%)
  tickSpacing Int

  // Current State (updated periodically)
  currentTick           Int?
  currentPrice          String? // BigInt as string (token1 per token0 in smallest unit)
  sqrtPriceX96          String? // Uniswap V3 price format
  feeGrowthGlobal0X128  String  @default("0") // Q128.128 fee growth of token0
  feeGrowthGlobal1X128  String  @default("0") // Q128.128 fee growth of token1
  tvl                   String?
  volume24h             String?
  apr                   Float?

  // Pool Owner (for custom tokens)
  ownerId String?
  owner   User?   @relation("PoolOwner", fields: [ownerId], references: [id])

  // Relations
  positions Position[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chain, poolAddress])
  @@unique([chain, token0Address, token1Address, fee])
  // @@index([chain, token0Id, token1Id])
  @@index([chain, token0Address, token1Address])
  @@index([ownerId])
  @@map("pools")
}

// Simplified Position Model
model Position {
  id String @id @default(cuid())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  poolId String
  pool   Pool   @relation(fields: [poolId], references: [id])

  // Position Details
  tickLower Int
  tickUpper Int
  liquidity String // BigInt as String

  // Token Configuration (f√ºr PnL-Berechnung)
  token0IsQuote Boolean // true wenn Token0 = Quote Asset, false wenn Token1 = Quote Asset

  // Owner Information
  owner String? // Wallet address of position owner

  // Import Metadata
  importType String // "manual", "wallet", "nft"
  nftId      String? // For NFT imports

  // Position State
  status String @default("active") // "active", "closed", "archived"

  // Relations
  events PositionEvent[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status])
  @@index([owner])
  @@map("positions")
}

// Position Event Model - Stateful event ledger with proper ordering and caching
model PositionEvent {
  id String @id @default(cuid())

  // Relations
  positionId String
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  // Ledger Order
  ledgerIgnore Boolean // Ignore this event in the ledger

  // Blockchain Ordering (CRITICAL for proper event sequencing)
  blockNumber      BigInt // Ethereum block number
  transactionIndex Int // Transaction index within block
  logIndex         Int // Log index within transaction
  blockTimestamp   DateTime // Block timestamp (not event processing time)
  transactionHash  String // For deduplication and verification

  // Event Classification
  eventType String // "INCREASE", "DECREASE", "COLLECT"

  // Liquidity Changes
  deltaL         String // BigInt: +/- liquidity change (can be negative for DECREASE)
  liquidityAfter String // BigInt: Total position liquidity after this event

  // Price Information
  poolPrice String // BigInt: Quote tokens per 1 Base token (in smallest units)

  // Token Amounts (in smallest units)
  token0Amount      String @default("0") // BigInt: Token0 amount added/removed
  token1Amount      String @default("0") // BigInt: Token1 amount added/removed
  tokenValueInQuote String @default("0") // BigInt: Position value in quote token (INCREASE/DECREASE only) after event

  // Fees
  feesCollected0  String @default("0") // BigInt: Collected token0 fees from this event
  feesCollected1  String @default("0") // BigInt: Collected token1 fees from this event
  feeValueInQuote String @default("0") // BigInt: Fee value in quote token (COLLECT events only)

  // Uncollected Principal Tracking
  uncollectedPrincipal0 String @default("0") // BigInt: Token0 principal waiting to be collected (DECREASE events add, COLLECT events subtract)
  uncollectedPrincipal1 String @default("0") // BigInt: Token1 principal waiting to be collected (DECREASE events add, COLLECT events subtract)

  // Cost Basis
  deltaCostBasis String // BigInt: Cost Basis Change
  costBasisAfter String // BigInt: Total cost basis after this event

  // PnL
  deltaPnL         String // BigInt: Change in Realized PnL   
  realizedPnLAfter String // BigInt: Realized PnL from position changes only (INCREASE/DECREASE)

  // Metadata and syncing
  source      String // "onchain" | "manual"
  createdAt   DateTime
  inputHash   String // manual: MD5("manual-rnd()), onchain: MD5(CONCAT(blocknumber, txIndex, logIndex))")
  calcVersion Int // Increasing number per calculation run, should be the same within each position

  @@unique([transactionHash, logIndex, positionId]) // Prevent exact duplicates
  @@unique([inputHash]) // Prvent duplicates during sync
  // Indexes for performance and ordering
  @@index([positionId, blockNumber, transactionIndex, logIndex]) // Natural blockchain ordering
  @@map("position_events")
}

// Pool Price Cache Model - Database-backed price caching for PoolPriceService
model PoolPriceCache {
  id String @id @default(cuid())

  // Cache Key Components
  chain       String // "ethereum", "arbitrum", "base"
  poolAddress String // Lowercase pool address
  blockNumber BigInt // Block number for historical data

  // Price Data (BigInt as String for precision)
  sqrtPriceX96 String // Uniswap V3 price format
  tick         Int    // Current tick

  // Block Information
  blockTimestamp DateTime // Block timestamp

  // Metadata
  source      String   @default("alchemy-rpc") // Always "alchemy-rpc"
  confidence  String   @default("exact")       // Always "exact"
  retrievedAt DateTime @default(now())         // When cached

  // TTL Management
  expiresAt DateTime? // For future TTL implementation

  // Performance Indexes
  @@unique([chain, poolAddress, blockNumber]) // Natural cache key
  @@index([chain, poolAddress]) // Pool-specific queries
  @@index([expiresAt]) // TTL cleanup queries
  @@map("pool_price_cache")
}
